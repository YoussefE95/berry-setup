;; **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; **

;; ** Variables ***********************************************************************
;; Workspace vars
(defpoll WSONE :interval "1s" `../scripts/workspace_info 1`)
(defpoll WSTWO :interval "1s" `../scripts/workspace_info 2`)
(defpoll WSTHREE :interval "1s" `../scripts/workspace_info 3`)
(defpoll WSFOUR :interval "1s" `../scripts/workspace_info 4`)
(defpoll WSFIVE :interval "1s" `../scripts/workspace_info 5`)

;; Time vars
(defpoll TIME :interval "5s" `date +\"%I:%M %p\"`)
(defpoll DATE :interval "5s" `date +\"%A, %B %d\"`)

;; Weather vars
(defpoll ICON :interval "10m" `../scripts/weather_info --icon`)
(defpoll TEMP :interval "10m" `../scripts/weather_info --temp`)
(defpoll HEX :interval "10m" `../scripts/weather_info --hex`)

;; Music vars
(defpoll SONG :interval "1s" `../scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `../scripts/music_info --artist`)
(defpoll COVER :interval "1s" `../scripts/music_info --cover`)
(defpoll STATUS :interval "1s" `../scripts/music_info --status`)

;; Battery vars
(defpoll BATICON :interval "1m" `../scripts/battery --icon`)
(defpoll BATPERC :interval "1m" `../scripts/battery --perc`)

;; Brightness vars
(defpoll BRIGHTNESS :interval "1s" `brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}'`)

;; Volume vars
(defpoll VOLICON :interval "1s" `../scripts/volume --icon`)
(defpoll VOLUME :interval "1s" `../scripts/volume --get`)

;; Network
(defpoll WIFIICON :interval "10s" `../scripts/check-network --icon`)
(defpoll NETSTAT :interval "10s" `../scripts/check-network --stat`)

;; User
(defvar IMAGE "../images/profile.jpg")
(defpoll USER :interval "10m" `whoami`)

;; ** Widgets *************************************************************************

;; search
(defwidget search [] 
		(box :class "dockbox"
			(box :orientation "h" :spacing 30 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :style "background-image: url('../images/icons/search.svg');" :class "genicon" :onclick "../scripts/widget_search --search")
				(button :style "background-image: url('../images/icons/dashboard.svg');" :class "genicon" :onclick "../scripts/widget_search --menu"))))

;; workspace
(defwidget workspace [] 
		(box :class "dockbox"
			(box :class "workspacebox":orientation "h" :spacing 30 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
                (button :style "background-image: url('${WSONE}');" :class "workspaceicon" :onclick "wmctrl -s 0")
                (button :style "background-image: url('${WSTWO}');" :class "workspaceicon" :onclick "wmctrl -s 1")
                (button :style "background-image: url('${WSTHREE}');" :class "workspaceicon" :onclick "wmctrl -s 2")
                (button :style "background-image: url('${WSFOUR}');" :class "workspaceicon" :onclick "wmctrl -s 3")
                (button :style "background-image: url('${WSFIVE}');" :class "workspaceicon" :onclick "wmctrl -s 4"))))

;; weather
(defwidget weather [] 
		(box :class "dockbox"
			(box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "time" :halign "start" :wrap "true" :limit-width 25 :text TIME)
				(label :class "date" :halign "start" :wrap "true" :limit-width 25 :text DATE))
			(box :class "weatherbox" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "weathericon" :style "color: ${HEX};" :text ICON)
				(label :class "weathertemp" :text TEMP))))

;; music
(defwidget music [] 
		(box :class "dockbox"
			(box :orientation "h" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
				(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
				(box :class "musicbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
					(label :class "song" :halign "start" :wrap "false" :limit-width 20 :text SONG)
					(label :class "artist" :halign "start" :wrap "false" :limit-width 20 :text ARTIST)))
			(box :class "musicbuttons" :orientation "h" :spacing 10 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :style "background-image: url('../images/icons/music/previous.svg');" :class "trackbutton" :onclick "../scripts/music_info --prev")
				(button :style "background-image: url('${STATUS}');" :class "playbutton" :onclick "../scripts/music_info --toggle")
				(button :style "background-image: url('../images/icons/music/next.svg');" :class "trackbutton" :onclick "../scripts/music_info --next"))))

;; system
(defwidget system [] 
		(box :class "dockbox"
			(box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :onclick "../scripts/volume --toggle"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${VOLICON}');" :class "volumeicon")
							(label :class "infotext" :halign "start" :text VOLUME)))
				(button :onclick "../scripts/widget_apps --nm"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${WIFIICON}');" :class "trayicon")
							(label :class "infotext" :halign "start" :text NETSTAT)))
				(button :onclick "sidebar/toggle_sidebar"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${IMAGE}');" :class "face")
							(label :class "infotext" :halign "start" :text USER))))))

;; ** Windows *************************************************************************

;; search
(defwindow search
           :monitor 0
           :geometry (geometry :x "370px"
                               :y "10px"
                               :width "120px"
                               :height "60px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(search))

;; workspace
(defwindow workspace
           :monitor 0
           :geometry (geometry :x "500px"
                               :y "10px"
                               :width "270px"
                               :height "60px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(workspace))

;; weather
(defwindow weather
           :monitor 0
           :geometry (geometry :x "780px"
                               :y "10px"
                               :width "500px"
                               :height "60px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(weather))

;; music
(defwindow music
           :monitor 0
           :geometry (geometry :x "1290px"
                               :y "10px"
                               :width "540px"
                               :height "60px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(music))

;; system
(defwindow system
           :monitor 0
           :geometry (geometry :x "1840px"
                               :y "10px"
                               :width "360px"
                               :height "60px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(system))
